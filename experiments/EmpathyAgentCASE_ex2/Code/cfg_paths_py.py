# -*- coding: utf-8 -*-
"""cfg_paths.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PnHskPViUQdcQpSC5uZpEjEhXEeMBMCG
"""

# cfg_paths.py
# Minimal, reusable path helper for EmpathyAgentReplication
# - Picks the first existing root (Mac or Colab)
# - Normalizes Code/code capitalization
# - Ensures dataset symlinks to frames/videos

from pathlib import Path
import os
import shutil

def _first_existing(paths):
    for p in paths:
        if p and Path(p).expanduser().exists():
            return Path(p).expanduser()
    return Path(paths[0]).expanduser()

# ---- Candidate roots (update only if you move the top-level folder) ----
ROOT = _first_existing([
    "~/Documents/to_git/EmpathyAgentReplication",  # Mac (your local)
    "/content/drive/MyDrive/Colab Notebooks/empathic-agent/experiments/EmpathyAgentReplication",  # Colab (default name)
    "/content/drive/MyDrive/colab notebooks/empathic-agent/experiments/EmpathyAgentReplication",  # sometimes lowercase on mount
    "/content/drive/MyDrive/colab_projects/empathic-agent/experiments/EmpathyAgentReplication",   # older layout you used
])

# Handle Code/code differences gracefully
CODE_DIR = _first_existing([
    ROOT / "code",
    ROOT / "Code",
])

DATA_DIR   = ROOT / "data"
OUTPUT_DIR = ROOT / "output"

# Original paper copy you placed under code/
OP_DIR         = CODE_DIR / "OriginalPaperEmpathyAgent"
BASELINE_DIR   = OP_DIR / "baseline"
DATASET_DIR    = OP_DIR / "dataset"
EA_OUTPUT_DIR  = OP_DIR / "output" / "empathetic_action"

# Optional training area you showed in your tree
TRAIN_DIR = CODE_DIR / "training_code"

def ensure_dirs():
    for p in [CODE_DIR, DATA_DIR, OUTPUT_DIR, OP_DIR, BASELINE_DIR, DATASET_DIR, EA_OUTPUT_DIR]:
        p.mkdir(parents=True, exist_ok=True)

def _safe_replace_dir_with_link(dst: Path, target: Path):
    """If dst exists as a real folder, remove it; then create a relative symlink to target."""
    if dst.exists() and not dst.is_symlink():
        shutil.rmtree(dst)
    if target.exists():
        # relative link keeps things portable
        rel = Path(os.path.relpath(target, dst.parent))
        if dst.exists():  # may already be a correct symlink
            try:
                if dst.resolve() == target.resolve():
                    return
            except Exception:
                pass
            dst.unlink()
        dst.symlink_to(rel)

def ensure_dataset_links():
    """
    Link the paper's dataset/{scripts,video} to your top-level data/{scripts,video}.
    Works whether your frames live at data/scripts or data/action_video/scripts.
    """
    # Prefer .../data/action_video/* if it exists, else .../data/*
    scripts_src = (DATA_DIR / "action_video" / "scripts") if (DATA_DIR / "action_video" / "scripts").exists() else (DATA_DIR / "scripts")
    video_src   = (DATA_DIR / "action_video" / "video")   if (DATA_DIR / "action_video" / "video").exists()   else (DATA_DIR / "video")

    scripts_dst = DATASET_DIR / "scripts"
    video_dst   = DATASET_DIR / "video"

    if scripts_src.exists():
        _safe_replace_dir_with_link(scripts_dst, scripts_src)
    if video_src.exists():
        _safe_replace_dir_with_link(video_dst, video_src)

def assert_key_paths():
    for p in [ROOT, CODE_DIR, OP_DIR, BASELINE_DIR]:
        assert p.exists(), f"Missing expected path: {p}"
    # dataset links are optional until you unzip frames/videos
    return True

def summary() -> str:
    lines = [
        f"ROOT         : {ROOT}",
        f"CODE_DIR     : {CODE_DIR}",
        f"DATA_DIR     : {DATA_DIR}",
        f"OUTPUT_DIR   : {OUTPUT_DIR}",
        f"OP_DIR       : {OP_DIR}",
        f"BASELINE_DIR : {BASELINE_DIR}",
        f"DATASET_DIR  : {DATASET_DIR}",
        f"EA_OUTPUT    : {EA_OUTPUT_DIR}",
        f"TRAIN_DIR    : {TRAIN_DIR}",
    ]
    return "\n".join(lines)

if __name__ == "__main__":
    ensure_dirs()
    ensure_dataset_links()
    assert_key_paths()
    print("✅ Paths ready\n" + summary())

# cfg_paths.py
# Minimal, reusable path helper for EmpathyAgentReplication
# - Picks the first existing root (Mac or Colab)
# - Normalizes Code/code capitalization
# - Ensures dataset symlinks to frames/videos

from pathlib import Path
import os
import shutil

def _first_existing(paths):
    for p in paths:
        if p and Path(p).expanduser().exists():
            return Path(p).expanduser()
    return Path(paths[0]).expanduser()

# ---- Candidate roots (update only if you move the top-level folder) ----
ROOT = _first_existing([
    "~/Documents/to_git/EmpathyAgentReplication",  # Mac (your local)
    "/content/drive/MyDrive/Colab Notebooks/empathic-agent/experiments/EmpathyAgentReplication",  # Colab (default name)
    "/content/drive/MyDrive/colab notebooks/empathic-agent/experiments/EmpathyAgentReplication",  # sometimes lowercase on mount
    "/content/drive/MyDrive/colab_projects/empathic-agent/experiments/EmpathyAgentReplication",   # older layout you used
])

# Handle Code/code differences gracefully
CODE_DIR = _first_existing([
    ROOT / "code",
    ROOT / "Code",
])

DATA_DIR   = ROOT / "data"
OUTPUT_DIR = ROOT / "output"

# Original paper copy you placed under code/
OP_DIR         = CODE_DIR / "OriginalPaperEmpathyAgent"
BASELINE_DIR   = OP_DIR / "baseline"
DATASET_DIR    = OP_DIR / "dataset"
EA_OUTPUT_DIR  = OP_DIR / "output" / "empathetic_action"

# Optional training area you showed in your tree
TRAIN_DIR = CODE_DIR / "training_code"

def ensure_dirs():
    for p in [CODE_DIR, DATA_DIR, OUTPUT_DIR, OP_DIR, BASELINE_DIR, DATASET_DIR, EA_OUTPUT_DIR]:
        p.mkdir(parents=True, exist_ok=True)

def _safe_replace_dir_with_link(dst: Path, target: Path):
    """If dst exists as a real folder, remove it; then create a relative symlink to target."""
    if dst.exists() and not dst.is_symlink():
        shutil.rmtree(dst)
    if target.exists():
        # relative link keeps things portable
        rel = Path(os.path.relpath(target, dst.parent))
        if dst.exists():  # may already be a correct symlink
            try:
                if dst.resolve() == target.resolve():
                    return
            except Exception:
                pass
            dst.unlink()
        dst.symlink_to(rel)

def ensure_dataset_links():
    """
    Link the paper's dataset/{scripts,video} to your top-level data/{scripts,video}.
    Works whether your frames live at data/scripts or data/action_video/scripts.
    """
    # Prefer .../data/action_video/* if it exists, else .../data/*
    scripts_src = (DATA_DIR / "action_video" / "scripts") if (DATA_DIR / "action_video" / "scripts").exists() else (DATA_DIR / "scripts")
    video_src   = (DATA_DIR / "action_video" / "video")   if (DATA_DIR / "action_video" / "video").exists()   else (DATA_DIR / "video")

    scripts_dst = DATASET_DIR / "scripts"
    video_dst   = DATASET_DIR / "video"

    if scripts_src.exists():
        _safe_replace_dir_with_link(scripts_dst, scripts_src)
    if video_src.exists():
        _safe_replace_dir_with_link(video_dst, video_src)

def assert_key_paths():
    for p in [ROOT, CODE_DIR, OP_DIR, BASELINE_DIR]:
        assert p.exists(), f"Missing expected path: {p}"
    # dataset links are optional until you unzip frames/videos
    return True

def summary() -> str:
    lines = [
        f"ROOT         : {ROOT}",
        f"CODE_DIR     : {CODE_DIR}",
        f"DATA_DIR     : {DATA_DIR}",
        f"OUTPUT_DIR   : {OUTPUT_DIR}",
        f"OP_DIR       : {OP_DIR}",
        f"BASELINE_DIR : {BASELINE_DIR}",
        f"DATASET_DIR  : {DATASET_DIR}",
        f"EA_OUTPUT    : {EA_OUTPUT_DIR}",
        f"TRAIN_DIR    : {TRAIN_DIR}",
    ]
    return "\n".join(lines)

if __name__ == "__main__":
    ensure_dirs()
    ensure_dataset_links()
    assert_key_paths()
    print("✅ Paths ready\n" + summary())